server {
    listen 80 default_server;
#     listen [::]:80 default_server;
    server_name app.local;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    return 301 https://$host$request_uri;
}


server {
    listen 443 ssl https;
    listen [::]:443 ssl https2;
    server_name app.local;
    root /usr/local/www/app;

    ssl_certificate /etc/letsencrypt/live/app.local/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/app.local/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/app.local/chain.pem;

    ssl_session_timeout 24h;
    ssl_session_cache shared:SSL:10m;  # about 40000 sessions
    ssl_session_tickets off;
    ssl_prefer_server_ciphers off;

	access_log /var/log/nginx/app.local.access.log combined buffer=512k flush=1m;
	error_log /var/log/nginx/app.local.error.log warn;

    location / {
        gzip_static on;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        #https://stackoverflow.com/questions/24453388/nginx-reverse-proxy-causing-504-gateway-timeout/36589120#36589120
        #https://www.f5.com/company/blog/nginx/avoiding-top-10-nginx-configuration-mistakes#no-keepalives see point 3
        proxy_set_header Connection "";
        proxy_http_version 1.1;
        proxy_ignore_headers Cache-Control Expires;
        proxy_redirect off;
        proxy_buffering off;
        proxy_buffer_size 24k;
        proxy_busy_buffers_size 24k;
        proxy_buffers 64 4k;
        proxy_connect_timeout  300s;
        proxy_send_timeout  300s;
        proxy_read_timeout  300s;
        proxy_pass http://app;
        proxy_next_upstream error timeout http_500;
    }

    location /static {
        autoindex on;
        alias /usr/local/www/app/static;
    }

    location /media {
        autoindex on;
        alias /usr/local/www/hfs_app/media;
    }

    location = /favicon.ico {
        log_not_found off;
    }

    location = /robots.txt {
        log_not_found off;
    }

    location ~* /\.(?!well-known\/) {
        deny all;
    }

    # Block access to files that can expose sensitive information.
    location ~* (?:#.*#|\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
      deny all;
    }
    location ~* /\.(?!well-known\/) {
      deny all;
    }

    # If you're not using a build process to manage your filename version revving,
    # you might want to consider enabling the following directives.
    #
    # To understand why this is important and even a better solution than using
    # something like `*.css?v231`, please see:
    # https://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/

    location ~* (.+)\.(?:\w+)\.(avifs?|bmp|css|cur|gif|ico|jpe?g|jxl|m?js|a?png|svgz?|webp|webmanifest)$ {
      try_files $uri $1.$2;
    }

    # SVGZ files are already compressed.
    # Disable gzip function for `.svgz` files.

    location ~* \.svgz$ {
        gzip off;
        add_header Content-Encoding gzip;
    }

}
